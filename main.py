import logging
import os
import random

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    CallbackQueryHandler,
)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update

load_dotenv()

logging.basicConfig(
    format="[%(asctime)s] %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = os.environ.get("TOKEN")


employees_dict = {
    0: "–°—Ç–µ–ø–∞–Ω –î–∏–±—Ä–æ–≤",
    1: "–ü–∞–≤–µ–ª –õ–∞–º–æ–Ω–æ–≤",
    2: "–ù–∏–∫–∏—Ç–∞ –ü–µ—Ä–µ—Ç–æ–ª—á–∏–Ω",
    3: "–ù–∏–∫–∏—Ç–∞ –†–æ–¥–∏–Ω",
    4: "–ê–Ω–¥—Ä–µ–π –ì–ª–∞–∑—ã—Ä–∏–Ω",
    5: "–Æ—Ä–∏–π –†—É–∑–±–∞–Ω–æ–≤",
    6: "–ê–Ω–¥—Ä–µ–π –ë–æ—Ä–æ–¥–∏–Ω",
    7: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –û–º–µ–ª–∞–µ–≤",
    8: "–ì—Ä–∏–≥–æ—Ä–∏–π –î–∏–º–∏—Ç—Ä–∏–æ–≥–ª–æ",
    9: "–ò–≥–æ—Ä—å –ù–∞–∑–∞—Ä–æ–≤",
    10: "–ò–≤–∞–Ω –ö—É–ª–∏–∫–æ–≤",
    11: "–î–º–∏—Ç—Ä–∏–π –ú–∏–ª–æ–≤",
    12: "–ú–∏—Ö–∞–∏–ª –®–≤–µ—Ü",
    13: "–í–∏–∫—Ç–æ—Ä –§–∞–¥–µ–µ–≤",
    14: "–ï–≤–≥–µ–Ω–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤",
    15: "–†–æ–º–∞–Ω –ö–æ—Ä–æ–ª–µ–≤",
    16: "–í–ª–∞–¥–∏–º–∏—Ä –ë–∏—Ä—é–∫–æ–≤",
    17: "–°–µ—Ä–≥–µ–π –ù–∏–∫–∏—Ç–∏–Ω",
    18: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ß–≤–∞–Ω–æ–≤",
    19: "–ê—Ä—Ç–µ–º–∏–π –ì–∞–≤—Ä–∏–ª–æ–≤",
    20: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ó–∞—Ö–∞—Ä–æ–≤",
    21: "–ê–Ω–¥—Ä–µ–π –ë–µ–Ω—å–∫–æ–≤—Å–∫–∏–π",
    22: "–ú–∞–∫—Å–∏–º –†–æ–Ω–∂–∏–Ω",
    23: "–ú–∏—Ö–∞–∏–ª –ú–∏—Ö–∞–π–ª–æ–≤",
    24: "–ò–≤–∞–Ω –ê—Ä—Ç–µ–º–µ–Ω–∫–æ",
    25: "–í–∏—Ç–∞–ª–∏–π –ò–≤–∞–Ω–æ–≤",
    26: "–ü–∞–≤–µ–ª –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤",
}


class Employee:
    def __init__(self, employees_dict: dict):
        self.employees_dict: dict = employees_dict
        self.id: int = random.choice(list(self.employees_dict.keys()))

    @property
    def next_one(self) -> str:
        return (
            self.employees_dict[self.id + 1]
            if self.id != 26
            else "–ü–∞—à–∞ –≤—Å–µ–≥–¥–∞ –∑–∞–º—ã–∫–∞—é—â–∏–πüöÄ"
        )

    @property
    def random_three(self) -> str:
        random_keys = random.sample(list(self.employees_dict), 3)
        return [self.employees_dict[id] for id in random_keys]

    @property
    def selected(self) -> str:
        return self.employees_dict[self.id]


def split_list(data):
    return [data[i : i + 2] for i in range(0, 4, 2)]


def create_answer_keyboard(selected_employee: Employee) -> list:
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ 3 –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = []
    for random_employee in selected_employee.random_three:
        keyboard.append(
            InlineKeyboardButton(
                f"{random_employee}",
                callback_data=f"incorrect, {selected_employee.next_one}",
            )
        )
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    correct_button: list = [
        InlineKeyboardButton(
            f"{selected_employee.next_one}",
            callback_data=f"correct, {selected_employee.next_one}",
        )
    ]

    keyboard.extend(correct_button)
    random.shuffle(keyboard)

    return split_list(keyboard)


def continue_keyboard() -> list:
    keyboard: list = [
        InlineKeyboardButton(
            "–°—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑",
            callback_data=f"continue",
        ),
        InlineKeyboardButton(
            f"–£–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
            callback_data=f"get_answer",
        ),
    ]
    return split_list(keyboard)


def get_choosen(context: CallbackContext.DEFAULT_TYPE):
    choosen = Employee(employees_dict)
    context.user_data["selected"] = choosen
    return choosen


async def start(update: Update, context: CallbackContext.DEFAULT_TYPE):
    choosen = get_choosen(context)
    keyboard: list = [
        [
            InlineKeyboardButton(
                "–ü–æ–µ—Ö–∞–ª–∏!",
                callback_data=f"continue",
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç!\n–¢—ã –î–û–õ–ñ–ï–ù –∑–Ω–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ª—é–¥–µ–π –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ!üòà",
        reply_markup=reply_markup,
    )


async def button(update: Update, context: CallbackContext.DEFAULT_TYPE):
    query = update.callback_query

    await query.answer()

    data = query.data
    answer = data.split(",")[0]
    keyboard = continue_keyboard()

    if answer == "correct":
        await query.edit_message_text(
            text=f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=InlineKeyboardMarkup([[keyboard[0][0]]])
        )  # –∂–¥—É PR –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É :)
    elif data == "get_answer":
        await query.edit_message_text(
            text=f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {context.user_data['selected'].next_one}",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    elif data == "continue":
        choosen = get_choosen(context)
        keyboard = create_answer_keyboard(choosen)
        await query.edit_message_text(
            text=f"–ö—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ {choosen.selected}?",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )
    else:
        await query.edit_message_text(
            text=f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –£—á–∏–º –º–∞—Ç—á–∞—Å—Ç—å!",
            reply_markup=InlineKeyboardMarkup(keyboard),
        )


if __name__ == "__main__":
    application = (
        ApplicationBuilder().token(TOKEN).build()
    )  # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—Å—Ç–∞–≤–∏—Ç—å

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()
